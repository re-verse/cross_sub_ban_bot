import os
import json
from datetime import datetime
from bot_config import PUBLIC_LOG_JSON, PUBLIC_LOG_MD

def log_public_action(action, username, subreddit, source_sub="", actor="", note=""):
    entry = {
        "timestamp": datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S'),
        "action": action,
        "username": username,
        "subreddit": subreddit,
        "source_sub": source_sub,
        "actor": actor,
        "note": note
    }
    try:
        data = []
        if os.path.exists(PUBLIC_LOG_JSON):
            try:
                with open(PUBLIC_LOG_JSON, 'r') as f:
                    data = json.load(f)
            except json.JSONDecodeError:
                print(f"[WARN] {PUBLIC_LOG_JSON} exists but is invalid. Starting fresh.")
                data = []

        data.append(entry)
        with open(PUBLIC_LOG_JSON, 'w') as f:
            json.dump(data, f, indent=2)

        print(f"[INFO] Logged public action: {entry}")

    except Exception as e:
        print(f"[ERROR] Failed to write to public ban log JSON: {e}")

def flush_public_markdown_log():
    try:
        if os.path.exists(PUBLIC_LOG_JSON):
            with open(PUBLIC_LOG_JSON, 'r') as f:
                entries = json.load(f)
        else:
            entries = []

        with open(PUBLIC_LOG_MD, 'w') as f:
            f.write("# NHL Cross-Sub Ban Log\n\n")
            f.write("This file is auto-generated by the bot.\n\n")
            f.write(f"Last updated: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC\n\n")
            f.write("---\n\n")
            for entry in entries:
                f.write(f"### [{entry['timestamp']}] {'\u2705' if entry['action']=='UNBANNED' else '\u274C'} {entry['action']} u/{entry['username']}\n")
                f.write(f"- **Subreddit**: r/{entry['subreddit']}\n")
                if entry.get('source_sub'):
                    f.write(f"- **Source Sub**: {entry['source_sub']}\n")
                if entry.get('actor'):
                    f.write(f"- **Actor**: {entry['actor']}\n")
                if entry.get('note'):
                    f.write(f"- **Note**: {entry['note']}\n")
                f.write("\n")
    except Exception as e:
        print(f"[ERROR] Failed to flush public ban markdown log: {e}")
